//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution {
  public:
    vector<int> calculateSpan(vector<int>& arr) {
        // write code here
        int n = arr.size();
        vector<int> span(n, 1); // Initialize all spans as 1
        stack<int> s; // Stack to store indices

        for (int i = 0; i < n; i++) {
            while (!s.empty() && arr[s.top()] <= arr[i]) {
                s.pop();
            }
            
            // If stack is empty, all elements before are smaller
            span[i] = s.empty() ? (i + 1) : (i - s.top());

            s.push(i); // Push the current index onto stack
        }

        return span;
        
    }
};

//{ Driver Code Starts.

int main() {
    string ts;
    getline(cin, ts);
    int t = stoi(ts);
    while (t--) {
        vector<int> arr;
        string input;
        getline(cin, input);
        stringstream ss(input);
        int number;
        while (ss >> number) {
            arr.push_back(number);
        }
        Solution obj;
        vector<int> ans = obj.calculateSpan(arr);
        for (int i = 0; i < ans.size(); i++) {
            cout << ans[i] << " ";
        }
        cout << endl;
        cout << "~" << endl;
    }
    return 0;
}
// } Driver Code Ends

/*Output:
For Input: 
100 80 60 70 60 75 85
Your Output: 
1 1 1 2 1 4 6
Expected Output: 
1 1 1 2 1 4 6
*/
