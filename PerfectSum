class Solution {
  public:
    int perfectSum(vector<int>& arr, int target) {
        // code here
        const int MOD = 1e9 + 7;
        int n = arr.size();

        // DP table (n+1) x (target+1)
        vector<vector<int>> dp(n + 1, vector<int>(target + 1, 0));

        // Base case: one way to make sum = 0 (empty subset)
        for (int i = 0; i <= n; i++) {
            dp[i][0] = 1;
        }

        // Fill the table
        for (int i = 1; i <= n; i++) {
            for (int sum = 0; sum <= target; sum++) {
                // Exclude current element
                dp[i][sum] = dp[i - 1][sum];

                // Include current element (if possible)
                if (arr[i - 1] <= sum) {
                    dp[i][sum] = (dp[i][sum] + dp[i - 1][sum - arr[i - 1]]) % MOD;
                }
            }
        }

        return dp[n][target];
    }
};

/*
Input: arr[] = [5, 2, 3, 10, 6, 8], target = 10
Output: 3
Explanation: The subsets {5, 2, 3}, {2, 8}, and {10} sum up to the target 10.
*/
