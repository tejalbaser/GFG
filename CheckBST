//optimal 1

class Solution {
  public:
    // Helper function to check if tree is BST with valid min/max range
    bool isBSTUtil(Node* node, long long minVal, long long maxVal) {
        if (node == nullptr)
            return true;

        if (node->data <= minVal || node->data >= maxVal)
            return false;

        return isBSTUtil(node->left, minVal, node->data) &&
               isBSTUtil(node->right, node->data, maxVal);
    }

    // Function to check whether a Binary Tree is BST or not.
    bool isBST(Node* root) {
        return isBSTUtil(root, LLONG_MIN, LLONG_MAX);
    }
};

//optimal 2
class Solution {
  public:
    Node* prev = nullptr;

    bool isBST(Node* root) {
        if (root == nullptr)
            return true;

        // Check left subtree
        if (!isBST(root->left))
            return false;

        // Check current node with previous node
        if (prev != nullptr && root->data <= prev->data)
            return false;

        // Update previous node
        prev = root;

        // Check right subtree
        return isBST(root->right);
    }
};

Input: 
root =
2 1 3 N N N 5
Your Output:
true
Expected Output:
true
