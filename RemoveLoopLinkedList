/*
class Node {
  public:
    int data;
    Node* next;

    Node(int val) {
        data = val;
        next = nullptr;
    }
};
*/
class Solution {
  public:
    void removeLoop(Node* head) {
        // code here
        if (head == nullptr || head->next == nullptr) return;

        Node* slow = head;
        Node* fast = head;

        // Step 1: Detect loop using Floydâ€™s cycle detection
        while (fast && fast->next) {
            slow = slow->next;
            fast = fast->next->next;
            if (slow == fast) break;
        }

        // If no loop found
        if (slow != fast) return;

        // Step 2: Find start of loop
        slow = head;
        if (slow == fast) {
            // special case: loop starts at head
            while (fast->next != slow) fast = fast->next;
        } else {
            while (slow->next != fast->next) {
                slow = slow->next;
                fast = fast->next;
            }
        }

        // Step 3: Break the loop
        fast->next = nullptr;
    }
};

/*
Input: head = 1 -> 3 -> 4, pos = 2
Output: true
Explanation: The linked list looks like
1 -> 3 -> 4
     | <- |
A loop is present in the list, and it is removed.
*/
