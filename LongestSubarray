class Solution {
public:
    int longestSubarray(vector<int>& arr, int k) {
        unordered_map<int, int> prefixIndex; // sum â†’ first index
        int sum = 0, maxLen = 0;
        
        for (int i = 0; i < arr.size(); i++) {
            sum += arr[i];
            
            // Case 1: subarray from 0 to i
            if (sum == k) {
                maxLen = max(maxLen, i + 1);
            }
            
            // Case 2: subarray from some j+1 to i
            if (prefixIndex.find(sum - k) != prefixIndex.end()) {
                maxLen = max(maxLen, i - prefixIndex[sum - k]);
            }
            
            // Store only first occurrence
            if (prefixIndex.find(sum) == prefixIndex.end()) {
                prefixIndex[sum] = i;
            }
        }
        
        return maxLen;
    }
};


Input: arr[] = [10, 5, 2, 7, 1, -10], k = 15
Output: 6
Explanation: Subarrays with sum = 15 are [5, 2, 7, 1], [10, 5] and [10, 5, 2, 7, 1, -10]. The length of the longest subarray with a sum of 15 is 6.


Input: 
arr[] =
10 5 2 7 1 -10
k =
15
Your Output:
6
Expected Output:
6
